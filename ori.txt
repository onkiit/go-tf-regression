package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"

	"github.com/gin-gonic/gin"
	tf "github.com/tensorflow/tensorflow/tensorflow/go"
)

type Data struct {
	Displacement float32 `json:"displacement"`
	DSPA         string  `json:"DSPA"`
}

type Sensor struct {
	Data []Data `json:"data"`
}

type OriginalResponse struct {
	XS []float32 `json:"xs"`
	YS []float32 `json:"ys"`
}

func main() {
	/*
	*get data sensor v
	*convert to tensor v
	*create variable coefficient
	*create predict function using polynomial equation
	*create lost function
	*create optimizer using Adam
	*training data
	*send curv data using REST API and plot to python
	*send prediction of the coefficients
	 */
	router := gin.Default()
	xs, ys, err := getTensor()
	if err != nil {
		log.Println("get tensor")
		return
	}
	log.Println(xs.Value())
	log.Println(ys.Value())

	router.GET("/original", func(c *gin.Context) {
		respData := &OriginalResponse{
			XS: (xs.Value()).([]float32),
			YS: (ys.Value()).([]float32),
		}
		data, err := json.Marshal(respData)
		if err != nil {
			c.AbortWithStatus(http.StatusBadRequest)
			return
		}
		c.JSON(http.StatusOK, string(data))
	})

	router.Run(":8001")
}

func getTensor() (*tf.Tensor, *tf.Tensor, error) {
	var (
		dt Sensor
		x  []float32
		y  []float32
	)
	sensorFile, err := os.Open("data.json")
	if err != nil {
		fmt.Println("read file")
		return nil, nil, nil
	}

	byteSensor, err := ioutil.ReadAll(sensorFile)
	if err != nil {
		fmt.Println("read all")
		return nil, nil, nil
	}

	if err := json.Unmarshal(byteSensor, &dt); err != nil {
		fmt.Println("unmarshal")
		return nil, nil, nil
	}

	for _, item := range dt.Data {
		tmp_x, err := strconv.ParseFloat(item.DSPA, 32)
		if err != nil {
			log.Println("strconv")
			return nil, nil, err
		}
		x = append(x, float32(tmp_x))
		y = append(y, item.Displacement)
	}

	xs, err := tf.NewTensor(x)
	if err != nil {
		log.Println("convert x")
		return nil, nil, err
	}

	ys, err := tf.NewTensor(y)
	if err != nil {
		log.Println("convert y")
		return nil, nil, err
	}

	return xs, ys, nil
}

func predict(xs *tf.Tensor) (*tf.Tensor, error) {
	// y :=
	return nil, nil
}
